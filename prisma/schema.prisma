generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  rolename  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  users     User[]   @relation("UserToRole")
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  name         String
  phone        String?
  address      String?
  clerkId      String  @unique
  gender       String?
  dob          String?
  birthPlace   String?
  departmentId Int?
  universityId Int?
  courseId     Int?
  imageUrl     String?

  roles               Role[]         @relation("UserToRole")
  chatMessage         ChatMessage[]
  balances            Balances[]
  hodCourse           Course?        @relation("hod_to_course")
  course              Course?        @relation("UserToCourse", fields: [courseId], references: [id])
  departmentAdmin     Department?    @relation("AdminToDepartment")
  departmentPrincipal Department?    @relation("PrincipalToDepartment")
  departmentDean      Department?    @relation("DeanToDepartment")
  event               Event[]
  faculty             Faculty?
  mentorClass         Class?         @relation("mentor_to_class")
  announcement        Announcement[]
  forumStudent        Forum[]        @relation("UserToForum")

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  forumParticipant ForumParticipant[]
  nonTeachingStaff NonTeachingStaff?
  student          Student?
  universityAdmin  University?        @relation("universityAdmin")
  coordinatorClass Class[]            @relation("coordinator_to_class")
  leaveModerator   Leave[]            @relation("moderator_to_leave")

  Department Department? @relation(fields: [departmentId], references: [id])
  university University? @relation("UserToUniversity", fields: [universityId], references: [id])

  Policy Policy[]
  Quiz   Quiz[]
}

model University {
  id               Int                @id @default(autoincrement())
  name             String
  location         String
  adminId          String             @unique
  established      Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  announcement     Announcement[]
  assignment       Assignment[]
  attendance       AttendanceRecord[]
  courses          Course[]
  departments      Department[]
  event            Event[]
  exam             Exam[]
  faculties        Faculty[]
  nonTeachingStaff NonTeachingStaff[]
  result           Result[]
  students         Student[]
  classes          Class[]
  subjects         Subject[]
  admin            User               @relation("universityAdmin", fields: [adminId], references: [id])
  users            User[]             @relation("UserToUniversity")

  Policy Policy[]
}

model NonTeachingStaff {
  id           Int        @id @unique
  userId       String     @unique
  experience   Int
  documents    Json[]
  departmentId Int
  universityId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  department   Department @relation(fields: [departmentId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
  user         User       @relation(fields: [userId], references: [clerkId])
}

model Faculty {
  id             String             @id @unique
  achievements   Json[]
  documents      Json[]
  position       String?
  departmentId   Int
  clerkId        String             @unique
  courseId       Int
  universityId   Int
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @default(now())
  Assignment     Assignment[]
  attendance     AttendanceRecord[]
  class          Class[]
  user           User               @relation(fields: [clerkId], references: [clerkId])
  course         Course             @relation(fields: [courseId], references: [id])
  department     Department         @relation(fields: [departmentId], references: [id])
  university     University         @relation(fields: [universityId], references: [id])
  forumModerator Forum[]
  students       Student[]
  slots          Slot[]             @relation("FacultyToLecture")
  subject        Subject[]          @relation("faculty_to_Subject")
  proxySlots     ProxySlot[]        @relation("LectrurProxyToSlot")
}

model Student {
  id            String                 @id @unique
  prn           String
  year          Int
  semester      Int
  guardianEmail String?
  gaurdianPhone String?
  rollNo        Int
  classId       Int?
  documents     Json[]
  mentorId      String?
  departmentId  Int
  universityId  Int
  courseId      Int
  clerkId       String                 @unique
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @default(now())
  user          User                   @relation(fields: [clerkId], references: [clerkId])
  course        Course                 @relation(fields: [courseId], references: [id])
  department    Department             @relation(fields: [departmentId], references: [id])
  mentor        Faculty?               @relation(fields: [mentorId], references: [id])
  university    University             @relation(fields: [universityId], references: [id])
  class         Class?                 @relation(fields: [classId], references: [id])
  submissions   AssignmentSubmission[]

  quizSubmissions QuizSubmissions[]
}

model Department {
  id               Int                @id @unique @default(autoincrement())
  name             String
  code             String             @unique
  principalId      String?            @unique
  deanId           String?            @unique
  universityId     Int
  adminId          String?            @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  announcement     Announcement[]
  assignment       Assignment[]
  attendance       AttendanceRecord[]
  courses          Course[]
  admin            User?              @relation("AdminToDepartment", fields: [adminId], references: [clerkId])
  principal        User?              @relation("PrincipalToDepartment", fields: [principalId], references: [clerkId])
  Dean             User?              @relation("DeanToDepartment", fields: [deanId], references: [clerkId])
  university       University         @relation(fields: [universityId], references: [id])
  event            Event[]
  exam             Exam[]
  faculties        Faculty[]
  forums           Forum[]
  nonTeachingStaff NonTeachingStaff[]
  result           Result[]
  students         Student[]
  subjects         Subject[]
  timeTable        TimeTable[]
  User             User[]
  classes          Class[]

  Policy Policy[]
}

model Course {
  id            Int                @id @unique @default(autoincrement())
  name          String
  code          String             @unique
  departmentId  Int
  universityId  Int
  hodId         String?            @unique
  totalSemister Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now())
  assignment    Assignment[]
  attendance    AttendanceRecord[]
  department    Department         @relation(fields: [departmentId], references: [id])
  hod           User?              @relation("hod_to_course", fields: [hodId], references: [clerkId])
  university    University         @relation(fields: [universityId], references: [id])
  exam          Exam[]
  faculties     Faculty[]
  forums        Forum[]
  result        Result[]
  students      Student[]
  subjects      Subject[]
  timeTable     TimeTable[]
  classes       Class[]
  users         User[]             @relation("UserToCourse")
}

model Class {
  id            Int      @id @unique @default(autoincrement())
  name          String
  code          String   @unique
  semister      Int
  departmentId  Int
  mentorId      String?  @unique
  universityId  Int
  coordinatorId String?
  courseId      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  assignment  Assignment[]
  attendance  AttendanceRecord[]
  course      Course             @relation(fields: [courseId], references: [id])
  department  Department         @relation(fields: [departmentId], references: [id])
  university  University         @relation(fields: [universityId], references: [id])
  exam        Exam[]
  coordinator User?              @relation("coordinator_to_class", fields: [coordinatorId], references: [clerkId])
  mentor      User?              @relation("mentor_to_class", fields: [mentorId], references: [id])
  faculties   Faculty[]
  forums      Forum[]
  result      Result[]
  students    Student[]
  subjects    Subject[]          @relation("class_to_Subject")
  timeTable   TimeTable[]
  Slot        Slot[]
}

model Subject {
  id           Int                @id @unique @default(autoincrement())
  name         String
  credits      Int
  semester     Int
  code         String
  courseId     Int
  departmentId Int
  universityId Int
  resultId     Int?
  syllabus     Json[] //{title,link}
  forumTags    String[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())
  assignment   Assignment[]
  attendance   AttendanceRecord[]
  forums       Forum[]
  course       Course             @relation(fields: [courseId], references: [id])
  department   Department         @relation(fields: [departmentId], references: [id])
  result       Result?            @relation(fields: [resultId], references: [id])
  university   University         @relation(fields: [universityId], references: [id])
  slots        Slot[]
  classes      Class[]            @relation("class_to_Subject")
  faculties    Faculty[]          @relation("faculty_to_Subject")
}

model AttendanceRecord {
  id           Int        @id @unique @default(autoincrement())
  slotId       Int
  classId      Int
  date         String
  attendance   Json // key = rollNo, value = status
  facultyId    String
  subjectId    Int
  courseId     Int
  departmentId Int
  universityId Int
  isLock       Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  class        Class      @relation(fields: [classId], references: [id])
  slot         Slot       @relation(fields: [slotId], references: [id])
  course       Course     @relation(fields: [courseId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  faculty      Faculty    @relation(fields: [facultyId], references: [clerkId])
  subject      Subject    @relation(fields: [subjectId], references: [id])
  university   University @relation(fields: [universityId], references: [id])

  @@unique([classId, slotId, date]) // Composite unique constraint
}

enum AssignmentSubmissionStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  LATE
}

model AssignmentSubmission {
  id           Int                        @id @unique @default(autoincrement())
  studentId    String
  assignmentId Int
  attachments  Json[]
  status       AssignmentSubmissionStatus @default(PENDING)
  marks        Int?
  feedback     String?
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @default(now())
  assignment   Assignment                 @relation(fields: [assignmentId], references: [id])
  student      Student                    @relation(fields: [studentId], references: [clerkId])
}

model Assignment {
  id             Int                    @id @unique @default(autoincrement())
  title          String
  startDate      String
  deadline       String
  attachmentUrl  String
  tag            String[]               @default(["IMP"])
  assignmentType String                 @default("TUTORIAL")
  subjectId      Int
  AuthorName     String
  facultyId      String
  courseId       Int
  classId        Int?
  departmentId   Int
  universityId   Int
  class          Class?                 @relation(fields: [classId], references: [id])
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now())
  course         Course                 @relation(fields: [courseId], references: [id])
  department     Department             @relation(fields: [departmentId], references: [id])
  faculty        Faculty                @relation(fields: [facultyId], references: [id])
  subject        Subject                @relation(fields: [subjectId], references: [id])
  university     University             @relation(fields: [universityId], references: [id])
  submissions    AssignmentSubmission[]
}

model Result {
  id            Int        @id @unique @default(autoincrement())
  prn           String
  rollNo        Int
  totalMarks    Int
  obtainedMarks Int
  egp           Int
  CGPA          Int
  SGPA          Int
  departmentId  Int
  universityId  Int
  courseId      Int
  examId        Int
  class         Class[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  course        Course     @relation(fields: [courseId], references: [id])
  department    Department @relation(fields: [departmentId], references: [id])
  exam          Exam       @relation(fields: [examId], references: [id])
  university    University @relation(fields: [universityId], references: [id])
  subjects      Subject[]
}

model Exam {
  id           Int        @id @unique @default(autoincrement())
  name         String
  semester     Int
  timeTable    String
  startDate    DateTime?
  endDate      DateTime?
  courseId     Int
  departmentId Int
  universityId Int
  syllabus     Int[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  course       Course     @relation(fields: [courseId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
  result       Result[]
  class        Class[]
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  message     String
  userId      String
  forumId     Int
  attachments Json[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Forum       Forum    @relation(fields: [forumId], references: [id])
  user        User     @relation(fields: [userId], references: [clerkId])
}

model ForumParticipant {
  id        Int      @id @default(autoincrement())
  userId    String
  forumId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  forum     Forum    @relation(fields: [forumId], references: [id])
  user      User     @relation(fields: [userId], references: [clerkId])
}

model Forum {
  id               Int                @id @default(autoincrement())
  name             String
  userId           String
  status           String
  departmentId     Int
  courseId         Int
  subjectId        Int
  classId          Int?
  moderatorId      String
  isPrivate        Boolean
  forumTags        String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  ChatMessage      ChatMessage[]
  class            Class?             @relation(fields: [classId], references: [id])
  course           Course             @relation(fields: [courseId], references: [id])
  department       Department         @relation(fields: [departmentId], references: [id])
  moderator        Faculty            @relation(fields: [moderatorId], references: [id])
  subject          Subject            @relation(fields: [subjectId], references: [id])
  user             User               @relation("UserToForum", fields: [userId], references: [clerkId])
  ForumParticipant ForumParticipant[]
}

model Announcement {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  date          DateTime @default(now())
  attachments   Json[]
  announcerId   String
  category      String
  departmentId  Int
  universityId  Int
  announcerName String
  classId       Int?
  subjectName   String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  announcer  User       @relation(fields: [announcerId], references: [clerkId])
  department Department @relation(fields: [departmentId], references: [id])
  university University @relation(fields: [universityId], references: [id])
}

model TimeTable {
  id           Int        @id @default(autoincrement())
  courseId     Int
  classId      Int        @unique
  departmentId Int
  slots        Slot[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  class        Class      @relation(fields: [classId], references: [id])
  course       Course     @relation(fields: [courseId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
}

model Slot {
  id           Int      @id @default(autoincrement())
  timeTableId  Int
  day          String
  startTime    String
  endTime      String
  subjectId    Int?
  title        String
  tag          String
  location     String
  remarks      String?
  courseId     Int
  classId      Int
  departmentId Int
  facultyId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  class     Class     @relation(fields: [classId], references: [id])
  faculty   Faculty?  @relation("FacultyToLecture", fields: [facultyId], references: [clerkId])
  subject   Subject?  @relation(fields: [subjectId], references: [id])
  timetable TimeTable @relation(fields: [timeTableId], references: [id])

  ProxySlot ProxySlot[]

  Attendance AttendanceRecord[]
}

model ProxySlot {
  id         Int      @id @default(autoincrement())
  slotId     Int
  lecturerId String
  status     String
  reason     String?
  date       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  slot     Slot    @relation(fields: [slotId], references: [id])
  lecturer Faculty @relation("LectrurProxyToSlot", fields: [lecturerId], references: [clerkId])
}

model Event {
  id           Int         @id @default(autoincrement())
  date         DateTime    @default(now())
  description  String
  type         String
  budget       Int
  organiserId  String
  universityId Int
  departmentId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  department   Department? @relation(fields: [departmentId], references: [id])
  organiser    User        @relation(fields: [organiserId], references: [clerkId])
  university   University  @relation(fields: [universityId], references: [id])
}

model Policy {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  attachments   Json[]
  category      String
  effectiveDate String
  expiryDate    String?
  departmentId  Int
  universityId  Int
  authorId      String
  authorName    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  sharedBy   User       @relation(fields: [authorId], references: [clerkId])
  department Department @relation(fields: [departmentId], references: [id])
  university University @relation(fields: [universityId], references: [id])
}

model Question {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  options       String[] // Multiple-choice options
  correctAnswer Int // Index of the correct option (0,1,2,3)
  marks         Int
  quizId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  quiz Quiz @relation(fields: [quizId], references: [id])
}

model Quiz {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  documentUrl       String?
  tags              String[]
  createdByName     String
  creatorId         String
  duration          String // Time in minutes
  numberOfQuestions Int
  totalMarks        Int
  visibility        String   @default("private") // "public" or "private"
  status            String   @default("draft") // "draft", "published", "completed"
  date              String?
  from              String?
  to                String?

  classId      Int
  subjectId    Int
  departmentId Int
  universityId Int

  createdBy       User              @relation(fields: [creatorId], references: [clerkId])
  questions       Question[]
  quizSubmissions QuizSubmissions[]
}

model QuizSubmissions {
  id        Int      @id @default(autoincrement())
  studentId String
  quizId    Int
  answers   String[]
  status    String
  marks     Int

  quiz    Quiz    @relation(fields: [quizId], references: [id])
  student Student @relation(fields: [studentId], references: [clerkId])
}

model LeaveType {
  id          String   @id @default(cuid())
  title       String
  values      String[] @default(["Credit", "Used", "Available"])
  category    String // Should be a lower case of the title 
  description String?
}

enum LeaveStatus {
  PENDING
  APPROVED
  INMODERATION
  REJECTED
}

model Leave {
  id            String      @id @default(cuid())
  type          String
  year          String      @default("")
  startDate     String
  endDate       String
  days          Int
  userName      String
  userNote      String?
  tasksLink     String?
  userEmail     String
  status        LeaveStatus @default(PENDING)
  moderatorNote String?
  updatedBy     String?
  moderator     User[]      @relation("moderator_to_leave")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model Balances {
  id                 String @id @default(cuid())
  year               String
  annualCredit       Int?   @default(0)
  annualUsed         Int?   @default(0)
  annualAvailable    Int?   @default(0)
  healthCredit       Int?   @default(0)
  healthUsed         Int?   @default(0)
  healthAvailable    Int?   @default(0)
  casualCredit       Int?   @default(0)
  casualUsed         Int?   @default(0)
  casualAvailable    Int?   @default(0)
  maternityCredit    Int?   @default(0)
  maternityUsed      Int?   @default(0)
  maternityAvailable Int?   @default(0)
  specialCredit      Int?   @default(0)
  specialUsed        Int?   @default(0)
  specialAvailable   Int?   @default(0)
  paternityCredit    Int?   @default(0)
  paternityUsed      Int?   @default(0)
  paternityAvailable Int?   @default(0)
  unpaidCredit       Int?   @default(0)
  unpaidUsed         Int?   @default(0)
  unpaidAvailable    Int?   @default(0)
  name               String
  email              String @unique
  user               User   @relation(fields: [email], references: [email], onDelete: Cascade)
}

model Events {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
}
